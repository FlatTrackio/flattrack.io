variables:
  GIT_SUBMODULE_STRATEGY: recursive
  ARCHES: amd64 arm64
  ARCH_DEFAULT: amd64
  REGISTRIES: $CI_REGISTRY

stages:
  - lint
  - build-container
  - post-build
  - deploy

.kaniko-build-pre-script: &kaniko-build-pre-script |
  set -x
  mkdir -p /kaniko/.docker
  cat << EOF > /kaniko/.docker/config.json
  {
    "auths": {
      "$CI_REGISTRY": {
        "username": "$CI_REGISTRY_USER",
        "password": "$CI_REGISTRY_PASSWORD"
      }
    }
  }
  EOF

.kaniko-build-taggable-name: &kaniko-build-taggable-name |
  BUILD_DATE="$(date +%Y%m%d)$((1 + RANDOM % 9))"
  if [ ! -f $CI_PROJECT_DIR/.env ]; then
    cat << EOF | tee -a $CI_PROJECT_DIR/.env
  APP_VERSION=${BUILD_DATE}
  EOF
  fi
  export KANIKO_RELEASE_DESTINATIONS="--destination $CI_REGISTRY_IMAGE:latest-$ARCH --destination $CI_REGISTRY_IMAGE:$BUILD_DATE-$ARCH"
  if [ ! $ARCH = $ARCH_DEFAULT ]; then
    export BASE_ARCH="-${ARCH}"
  fi
  export PROJECT_PATH=$(echo $CI_PROJECT_PATH | tr '[:upper:]' '[:lower:]')

.kaniko-build: &kaniko-build |
  /kaniko/executor \
    --snapshotMode=redo \
    --context $CI_PROJECT_DIR \
    --dockerfile $CI_PROJECT_DIR/Dockerfile \
    --build-arg ARCH="$BASE_ARCH" \
    $KANIKO_DESTINATIONS \
    $KANIKO_RELEASE_DESTINATIONS

.build-container: &build-container
  stage: build-container
  image:
    name: gcr.io/kaniko-project/executor:debug-v1.3.0
    entrypoint: [""]
  retry: 2
  only:
    - master
    - tags
  before_script:
    - *kaniko-build-pre-script
    - *kaniko-build-taggable-name
  script:
    - *kaniko-build
  artifacts:
    paths:
      - .env

build-container-amd64:
  <<: *build-container
  variables:
    ARCH: "amd64"

build-container-arm64:
  <<: *build-container
  variables:
    ARCH: "arm64"

tag-container-image:
  stage: post-build
  image: docker:20.10.6
  before_script:
    - *kaniko-build-pre-script
    - *kaniko-build-taggable-name
  script:
    - |
        set -x
        export $(cat $CI_PROJECT_DIR/.env | xargs)
        cp -rf /kaniko/.docker $HOME/.docker
        if [[ -z "$CI_COMMIT_TAG" ]]; then
          APP_BUILD_VERSION=
        fi
        for tag in $APP_VERSION latest$BRANCH_NAME; do
          for reg in $REGISTRIES; do
            export IMAGE_TAG_WITH_ARCH=""
            for arch in $ARCHES; do
              IMAGE="$reg/$PROJECT_PATH:$tag-$arch"
              export IMAGE_TAG_WITH_ARCH="$IMAGE_TAG_WITH_ARCH $IMAGE"
            done
            docker manifest create $reg/$PROJECT_PATH:$tag $IMAGE_TAG_WITH_ARCH
            for arch in $ARCHES; do
              # TODO tidy up
              EXTRA_ARGS=""
              if [ "$arch" = "arm64" ]; then
                EXTRA_ARGS="--variant v8"
              fi
              docker manifest annotate $reg/$PROJECT_PATH:$tag $reg/$PROJECT_PATH:$tag-$arch --os linux --arch $arch $EXTRA_ARGS
            done
            docker manifest push $reg/$PROJECT_PATH:$tag
          done
        done

deploy:
  stage: deploy
  image:
    name: alpine:3.12
    entrypoint: [""]
  variables:
    KUBECTL_VERSION: v1.20.2
    KUBECTL_HASH: 2583b1c9fbfc5443a722fb04cf0cc83df18e45880a2cf1f6b52d9f595c5beb88
    MANIFEST_FOLDER: $CI_PROJECT_DIR/manifests
  before_script:
    - export $(cat $CI_PROJECT_DIR/.env | xargs)
    - apk add --no-cache curl gettext
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl
    - echo "$KUBECTL_HASH  kubectl" | sha256sum -c -
    - chmod +x kubectl
    - mv kubectl /usr/local/bin/kubectl
    - mkdir -p $HOME/.kube
    - echo ${KUBECONFIG_FROM_ENV} | base64 -d > $HOME/.kube/config
    - cd $MANIFEST_FOLDER
  script:
    - |
        for MANIFEST in $MANIFEST_FOLDER/*; do
          if cat $MANIFEST | grep -q ci-sa:noapply=true; then
            continue
          fi
          envsubst < $MANIFEST | kubectl apply -f -
        done
  only:
    - master
    - tags

lint_frontend:
  stage: lint
  image: node:12.10.0-alpine
  allow_failure: true
  before_script:
    - npm i
  script:
    - npm run lint

spell_check:
  stage: lint
  image: golang:1.13.10-alpine3.11
  allow_failure: true
  before_script:
    - apk add --no-cache git
    - go get -u github.com/client9/misspell/cmd/misspell
  script:
    - misspell -error src docs migrations pubic template k8s-manifests README*
